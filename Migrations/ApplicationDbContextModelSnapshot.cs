// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using _AbsoPickUp.Data;

#nullable disable

namespace _AbsoPickUp.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.7")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("_AbsoPickUp.Models.BusinessDetails", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"), 1L, 1);

                    b.Property<string>("ContactPerson")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("ExternalContractNumber")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("LicenceNumber")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("VAT")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Website")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.ToTable("BusinessDetails");
                });

            modelBuilder.Entity("_AbsoPickUp.Models.BusinessDocuments", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"), 1L, 1);

                    b.Property<string>("AgreementFilePath")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ChamberCommerceFilePath")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LicenceFilePath")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("VATFilePath")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.ToTable("BusinessDocuments");
                });

            modelBuilder.Entity("_AbsoPickUp.Models.CancelledOrders", b =>
                {
                    b.Property<int>("OrderCancelId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("OrderCancelId"), 1L, 1);

                    b.Property<string>("CancelReason")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CancelledDateTime")
                        .HasColumnType("datetime2");

                    b.Property<int>("OrderId")
                        .HasColumnType("int");

                    b.Property<string>("SenderId")
                        .IsRequired()
                        .HasMaxLength(512)
                        .HasColumnType("nvarchar(512)");

                    b.HasKey("OrderCancelId");

                    b.ToTable("CancelledOrders");
                });

            modelBuilder.Entity("_AbsoPickUp.Models.DeliveryDetails", b =>
                {
                    b.Property<int>("DeliveryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("DeliveryId"), 1L, 1);

                    b.Property<DateTime>("DeliveryDateTime")
                        .HasColumnType("datetime2");

                    b.Property<int>("DriverId")
                        .HasColumnType("int");

                    b.Property<decimal>("DriverLat")
                        .HasPrecision(18, 9)
                        .HasColumnType("decimal(18,9)");

                    b.Property<decimal>("DriverLong")
                        .HasPrecision(18, 9)
                        .HasColumnType("decimal(18,9)");

                    b.Property<int>("RequestId")
                        .HasColumnType("int");

                    b.Property<int>("StatusId")
                        .HasColumnType("int");

                    b.HasKey("DeliveryId");

                    b.HasIndex("RequestId");

                    b.HasIndex("StatusId");

                    b.ToTable("DeliveryDetails");
                });

            modelBuilder.Entity("_AbsoPickUp.Models.DeliveryPrice", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("Amount")
                        .HasColumnType("int");

                    b.Property<string>("DeliverBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("TypeId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("TypeId");

                    b.ToTable("DeliveryPrice");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Amount = 45,
                            DeliverBy = "Same day delivery",
                            TypeId = 1
                        },
                        new
                        {
                            Id = 2,
                            Amount = 80,
                            DeliverBy = "Within 2 hrs delivery",
                            TypeId = 2
                        },
                        new
                        {
                            Id = 3,
                            Amount = 300,
                            DeliverBy = "Immediate delivery",
                            TypeId = 3
                        });
                });

            modelBuilder.Entity("_AbsoPickUp.Models.DeliveryRequest", b =>
                {
                    b.Property<int>("RequestId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("RequestId"), 1L, 1);

                    b.Property<DateTime>("CreatedDateTime")
                        .HasColumnType("datetime2");

                    b.Property<int>("DeliveryTypeId")
                        .HasColumnType("int");

                    b.Property<int>("DialCode")
                        .HasColumnType("int");

                    b.Property<string>("ReceiverAddress")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ReceiverEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<decimal>("ReceiverLat")
                        .HasPrecision(18, 9)
                        .HasColumnType("decimal(18,9)");

                    b.Property<decimal>("ReceiverLong")
                        .HasPrecision(18, 9)
                        .HasColumnType("decimal(18,9)");

                    b.Property<string>("ReceiverMobileNumber")
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)");

                    b.Property<string>("ReceiverName")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("ReceiverPlaceId")
                        .HasMaxLength(512)
                        .HasColumnType("nvarchar(512)");

                    b.Property<DateTime>("RequestDateTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("SenderAddress")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SenderId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("SenderLat")
                        .HasPrecision(18, 9)
                        .HasColumnType("decimal(18,9)");

                    b.Property<decimal>("SenderLong")
                        .HasPrecision(18, 9)
                        .HasColumnType("decimal(18,9)");

                    b.Property<string>("SenderPlaceId")
                        .HasMaxLength(512)
                        .HasColumnType("nvarchar(512)");

                    b.Property<string>("TotalDeliveryDistance")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("TotalDeliveryTime")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("RequestId");

                    b.HasIndex("DeliveryTypeId");

                    b.ToTable("DeliveryRequest");
                });

            modelBuilder.Entity("_AbsoPickUp.Models.DeliveryStatus", b =>
                {
                    b.Property<int>("StatusId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("StatusId"), 1L, 1);

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("StatusId");

                    b.ToTable("DeliveryStatus");

                    b.HasData(
                        new
                        {
                            StatusId = 1,
                            Description = "Unassigned"
                        },
                        new
                        {
                            StatusId = 2,
                            Description = "Assigned"
                        },
                        new
                        {
                            StatusId = 3,
                            Description = "With Driver"
                        },
                        new
                        {
                            StatusId = 4,
                            Description = "Delivery on Route"
                        },
                        new
                        {
                            StatusId = 5,
                            Description = "Arrived"
                        },
                        new
                        {
                            StatusId = 6,
                            Description = "Delivered"
                        },
                        new
                        {
                            StatusId = 7,
                            Description = "Cancelled"
                        });
                });

            modelBuilder.Entity("_AbsoPickUp.Models.DeliveryTypes", b =>
                {
                    b.Property<int>("DeliveryTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("DeliveryTypeId"), 1L, 1);

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("DeliveryTypeId");

                    b.ToTable("DeliveryTypes");

                    b.HasData(
                        new
                        {
                            DeliveryTypeId = 1,
                            Description = "Normal"
                        },
                        new
                        {
                            DeliveryTypeId = 2,
                            Description = "Express"
                        },
                        new
                        {
                            DeliveryTypeId = 3,
                            Description = "Bakkie"
                        });
                });

            modelBuilder.Entity("_AbsoPickUp.Models.DocumentTypes", b =>
                {
                    b.Property<int>("DocTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("DocTypeId"), 1L, 1);

                    b.Property<string>("DocTypeDescription")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("DocTypeId");

                    b.ToTable("DocumentTypes");

                    b.HasData(
                        new
                        {
                            DocTypeId = 1,
                            DocTypeDescription = "License"
                        },
                        new
                        {
                            DocTypeId = 2,
                            DocTypeDescription = "ProofOfResidence"
                        },
                        new
                        {
                            DocTypeId = 3,
                            DocTypeDescription = "NumberPlatePic"
                        },
                        new
                        {
                            DocTypeId = 4,
                            DocTypeDescription = "VehicleRegisteration"
                        },
                        new
                        {
                            DocTypeId = 5,
                            DocTypeDescription = "IDBook"
                        },
                        new
                        {
                            DocTypeId = 6,
                            DocTypeDescription = "IDCard"
                        },
                        new
                        {
                            DocTypeId = 7,
                            DocTypeDescription = "Selfie"
                        },
                        new
                        {
                            DocTypeId = 8,
                            DocTypeDescription = "ElectionCard"
                        },
                        new
                        {
                            DocTypeId = 9,
                            DocTypeDescription = "BirthCertificate"
                        },
                        new
                        {
                            DocTypeId = 10,
                            DocTypeDescription = "Passport"
                        },
                        new
                        {
                            DocTypeId = 11,
                            DocTypeDescription = "CarDiscPic"
                        },
                        new
                        {
                            DocTypeId = 12,
                            DocTypeDescription = "DriverProfilePic"
                        },
                        new
                        {
                            DocTypeId = 13,
                            DocTypeDescription = "Any ID Proof"
                        },
                        new
                        {
                            DocTypeId = 14,
                            DocTypeDescription = "Image Before Packing"
                        },
                        new
                        {
                            DocTypeId = 15,
                            DocTypeDescription = "Image After Packing"
                        },
                        new
                        {
                            DocTypeId = 16,
                            DocTypeDescription = "Vehicle Frontside Image"
                        },
                        new
                        {
                            DocTypeId = 17,
                            DocTypeDescription = "Vehicle Backside Image"
                        },
                        new
                        {
                            DocTypeId = 18,
                            DocTypeDescription = "IDCardBack"
                        },
                        new
                        {
                            DocTypeId = 19,
                            DocTypeDescription = "VAT File"
                        },
                        new
                        {
                            DocTypeId = 20,
                            DocTypeDescription = "ChamberOfCommerce File"
                        },
                        new
                        {
                            DocTypeId = 21,
                            DocTypeDescription = "Business License File"
                        },
                        new
                        {
                            DocTypeId = 22,
                            DocTypeDescription = "Agreement File"
                        });
                });

            modelBuilder.Entity("_AbsoPickUp.Models.DriverBankDetails", b =>
                {
                    b.Property<int>("AccId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("AccId"), 1L, 1);

                    b.Property<string>("AccountName")
                        .IsRequired()
                        .HasMaxLength(512)
                        .HasColumnType("nvarchar(512)");

                    b.Property<string>("AccountNumber")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Bank")
                        .IsRequired()
                        .HasMaxLength(512)
                        .HasColumnType("nvarchar(512)");

                    b.Property<string>("Branch")
                        .HasMaxLength(512)
                        .HasColumnType("nvarchar(512)");

                    b.Property<string>("BranchCode")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("DriverId")
                        .HasColumnType("int");

                    b.Property<string>("SwiftCode")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("AccId");

                    b.ToTable("DriverBankDetails");
                });

            modelBuilder.Entity("_AbsoPickUp.Models.DriverDetails", b =>
                {
                    b.Property<int>("DriverId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("DriverId"), 1L, 1);

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ApplicationStatus")
                        .HasColumnType("int");

                    b.Property<string>("City")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("DOB")
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)");

                    b.Property<string>("DeletedBy")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("DeviceToken")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DeviceType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DialCode")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsPhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int?>("Otp")
                        .HasMaxLength(25)
                        .HasColumnType("int");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("ProfilePic")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<int>("ProvinceId")
                        .HasColumnType("int");

                    b.Property<string>("RejectReason")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ScreenId")
                        .HasColumnType("int");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("DriverId");

                    b.HasIndex("ProvinceId");

                    b.ToTable("DriverDetails");
                });

            modelBuilder.Entity("_AbsoPickUp.Models.DriverDocuments", b =>
                {
                    b.Property<int>("DocId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("DocId"), 1L, 1);

                    b.Property<string>("DocImgPath")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("DocTypeId")
                        .HasColumnType("int");

                    b.Property<int>("DriverId")
                        .HasColumnType("int");

                    b.HasKey("DocId");

                    b.HasIndex("DocTypeId");

                    b.ToTable("DriverDocuments");
                });

            modelBuilder.Entity("_AbsoPickUp.Models.DriverRatings", b =>
                {
                    b.Property<int>("RatingsId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("RatingsId"), 1L, 1);

                    b.Property<DateTime>("CommentedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("DriverId")
                        .HasColumnType("int");

                    b.Property<double>("Ratings")
                        .HasColumnType("float");

                    b.Property<string>("UserComment")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("RatingsId");

                    b.ToTable("DriverRatings");
                });

            modelBuilder.Entity("_AbsoPickUp.Models.DriverWorkStatus", b =>
                {
                    b.Property<int>("StatusId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("StatusId"), 1L, 1);

                    b.Property<int>("DriverId")
                        .HasColumnType("int");

                    b.Property<bool>("OnlineStatus")
                        .HasColumnType("bit");

                    b.Property<DateTime>("StatusDateTime")
                        .HasColumnType("datetime2");

                    b.HasKey("StatusId");

                    b.ToTable("DriverWorkStatus");
                });

            modelBuilder.Entity("_AbsoPickUp.Models.IndividualUserDocuments", b =>
                {
                    b.Property<int>("DocId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("DocId"), 1L, 1);

                    b.Property<string>("DocImgPath")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("DocTypeId")
                        .HasColumnType("int");

                    b.Property<string>("IndividualUserId")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("DocId");

                    b.HasIndex("DocTypeId");

                    b.ToTable("IndividualUserDocuments");
                });

            modelBuilder.Entity("_AbsoPickUp.Models.Notifications", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsRead")
                        .HasColumnType("bit");

                    b.Property<int>("RequestId")
                        .HasColumnType("int");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ToDriverId")
                        .HasColumnType("int");

                    b.Property<string>("ToUserId")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Notifications");
                });

            modelBuilder.Entity("_AbsoPickUp.Models.Orders", b =>
                {
                    b.Property<int>("OrderId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("OrderId"), 1L, 1);

                    b.Property<DateTime>("AcceptedDateTime")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("CreatedDateTime")
                        .HasColumnType("datetime2");

                    b.Property<int>("DriverId")
                        .HasColumnType("int");

                    b.Property<bool>("IsDriverRated")
                        .HasColumnType("bit");

                    b.Property<int>("OrderStatus")
                        .HasColumnType("int");

                    b.Property<int>("RequestId")
                        .HasColumnType("int");

                    b.Property<string>("SenderId")
                        .IsRequired()
                        .HasMaxLength(512)
                        .HasColumnType("nvarchar(512)");

                    b.Property<DateTime>("UpdatedDateTime")
                        .HasColumnType("datetime2");

                    b.HasKey("OrderId");

                    b.ToTable("Orders");
                });

            modelBuilder.Entity("_AbsoPickUp.Models.ParcelCategory", b =>
                {
                    b.Property<int>("CategoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CategoryId"), 1L, 1);

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.HasKey("CategoryId");

                    b.ToTable("ParcelCategory");
                });

            modelBuilder.Entity("_AbsoPickUp.Models.ParcelDelivery", b =>
                {
                    b.Property<int>("PINId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PINId"), 1L, 1);

                    b.Property<int>("DeliveryPIN")
                        .HasColumnType("int");

                    b.Property<int>("DriverId")
                        .HasColumnType("int");

                    b.Property<bool>("IsVerified")
                        .HasColumnType("bit");

                    b.Property<int>("OrderId")
                        .HasColumnType("int");

                    b.Property<DateTime>("PINSentAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("ReceiverPhoneNo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("RequestId")
                        .HasColumnType("int");

                    b.Property<DateTime>("VerifiedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("PINId");

                    b.ToTable("ParcelDelivery");
                });

            modelBuilder.Entity("_AbsoPickUp.Models.ParcelDetails", b =>
                {
                    b.Property<int>("ParcelId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ParcelId"), 1L, 1);

                    b.Property<string>("ImgAfterPacking")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("ImgBeforePacking")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("ParcelName")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("ParcelNotes")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("RequestId")
                        .HasColumnType("int");

                    b.HasKey("ParcelId");

                    b.ToTable("ParcelDetails");
                });

            modelBuilder.Entity("_AbsoPickUp.Models.ParcelNotifications", b =>
                {
                    b.Property<int>("NotificationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("NotificationId"), 1L, 1);

                    b.Property<bool>("Accepted")
                        .HasColumnType("bit");

                    b.Property<DateTime>("CreateDateTime")
                        .HasColumnType("datetime2");

                    b.Property<int>("DriverId")
                        .HasColumnType("int");

                    b.Property<decimal>("DriverLat")
                        .HasPrecision(18, 9)
                        .HasColumnType("decimal(18,9)");

                    b.Property<decimal>("DriverLon")
                        .HasPrecision(18, 9)
                        .HasColumnType("decimal(18,9)");

                    b.Property<string>("DriverPlaceId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsNotificationSent")
                        .HasColumnType("bit");

                    b.Property<DateTime>("NotifySentDateTime")
                        .HasColumnType("datetime2");

                    b.Property<int>("RequestId")
                        .HasColumnType("int");

                    b.HasKey("NotificationId");

                    b.ToTable("ParcelNotifications");
                });

            modelBuilder.Entity("_AbsoPickUp.Models.ParcelSubCategory", b =>
                {
                    b.Property<int>("SubCategoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("SubCategoryId"), 1L, 1);

                    b.Property<int>("CategoryId")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.HasKey("SubCategoryId");

                    b.HasIndex("CategoryId");

                    b.ToTable("ParcelSubCategory");
                });

            modelBuilder.Entity("_AbsoPickUp.Models.PaymentDetails", b =>
                {
                    b.Property<int>("PaymentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PaymentId"), 1L, 1);

                    b.Property<double>("Amount")
                        .HasColumnType("float");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Currency")
                        .HasMaxLength(5)
                        .HasColumnType("nvarchar(5)");

                    b.Property<int>("OrderId")
                        .HasColumnType("int");

                    b.Property<int>("PaymentStatusId")
                        .HasColumnType("int");

                    b.Property<int>("TransactionId")
                        .HasColumnType("int");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.HasKey("PaymentId");

                    b.HasIndex("OrderId");

                    b.ToTable("PaymentDetails");
                });

            modelBuilder.Entity("_AbsoPickUp.Models.SouthAfricaProvinces", b =>
                {
                    b.Property<int>("ProvinceId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ProvinceId"), 1L, 1);

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ProvinceId");

                    b.ToTable("SouthAfricaProvinces");

                    b.HasData(
                        new
                        {
                            ProvinceId = 1,
                            Name = "Eastern Cape"
                        },
                        new
                        {
                            ProvinceId = 2,
                            Name = "Free State"
                        },
                        new
                        {
                            ProvinceId = 3,
                            Name = "Gauteng"
                        },
                        new
                        {
                            ProvinceId = 4,
                            Name = "KwaZulu-Natal"
                        },
                        new
                        {
                            ProvinceId = 5,
                            Name = "Limpopo"
                        },
                        new
                        {
                            ProvinceId = 6,
                            Name = "Mpumalanga"
                        },
                        new
                        {
                            ProvinceId = 7,
                            Name = "Northern Cape"
                        },
                        new
                        {
                            ProvinceId = 8,
                            Name = "North West"
                        },
                        new
                        {
                            ProvinceId = 9,
                            Name = "Western Cape"
                        });
                });

            modelBuilder.Entity("_AbsoPickUp.Models.TransactionMaster", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("OrderId")
                        .IsRequired()
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("PaymentMode")
                        .HasMaxLength(200)
                        .HasColumnType("int");

                    b.Property<DateTime>("TransactionDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("TransactionType")
                        .HasMaxLength(50)
                        .HasColumnType("int");

                    b.Property<string>("UserId")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.ToTable("TransactionMaster");
                });

            modelBuilder.Entity("_AbsoPickUp.Models.UserTypes", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"), 1L, 1);

                    b.Property<string>("Type")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.ToTable("UserTypes");

                    b.HasData(
                        new
                        {
                            ID = 1,
                            Type = "Individual"
                        },
                        new
                        {
                            ID = 2,
                            Type = "Business"
                        },
                        new
                        {
                            ID = 3,
                            Type = "Admin"
                        });
                });

            modelBuilder.Entity("_AbsoPickUp.Models.VehicleBrand", b =>
                {
                    b.Property<int>("BrandId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("BrandId"), 1L, 1);

                    b.Property<string>("BrandName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("VehicleTypeId")
                        .HasColumnType("int");

                    b.HasKey("BrandId");

                    b.ToTable("VehicleBrand");

                    b.HasData(
                        new
                        {
                            BrandId = 1,
                            BrandName = "GWM",
                            VehicleTypeId = 3
                        },
                        new
                        {
                            BrandId = 2,
                            BrandName = "Ferrari",
                            VehicleTypeId = 2
                        },
                        new
                        {
                            BrandId = 3,
                            BrandName = "Lexus",
                            VehicleTypeId = 2
                        },
                        new
                        {
                            BrandId = 4,
                            BrandName = "Austin-Healey",
                            VehicleTypeId = 2
                        },
                        new
                        {
                            BrandId = 5,
                            BrandName = "Alfa Romeo",
                            VehicleTypeId = 2
                        },
                        new
                        {
                            BrandId = 6,
                            BrandName = "Fiat",
                            VehicleTypeId = 2
                        },
                        new
                        {
                            BrandId = 7,
                            BrandName = "Aston Martin",
                            VehicleTypeId = 2
                        },
                        new
                        {
                            BrandId = 8,
                            BrandName = "Maserati",
                            VehicleTypeId = 2
                        },
                        new
                        {
                            BrandId = 9,
                            BrandName = "Audi",
                            VehicleTypeId = 2
                        },
                        new
                        {
                            BrandId = 10,
                            BrandName = "Ford",
                            VehicleTypeId = 3
                        },
                        new
                        {
                            BrandId = 11,
                            BrandName = "Mahindra",
                            VehicleTypeId = 3
                        },
                        new
                        {
                            BrandId = 12,
                            BrandName = "Subaru",
                            VehicleTypeId = 2
                        },
                        new
                        {
                            BrandId = 13,
                            BrandName = "Hero",
                            VehicleTypeId = 1
                        },
                        new
                        {
                            BrandId = 14,
                            BrandName = "BMW",
                            VehicleTypeId = 2
                        },
                        new
                        {
                            BrandId = 15,
                            BrandName = "Land Cruiser",
                            VehicleTypeId = 3
                        },
                        new
                        {
                            BrandId = 16,
                            BrandName = "Suzuki",
                            VehicleTypeId = 1
                        },
                        new
                        {
                            BrandId = 17,
                            BrandName = "TVS",
                            VehicleTypeId = 1
                        },
                        new
                        {
                            BrandId = 18,
                            BrandName = "Mazda",
                            VehicleTypeId = 2
                        },
                        new
                        {
                            BrandId = 19,
                            BrandName = "Tata",
                            VehicleTypeId = 2
                        },
                        new
                        {
                            BrandId = 20,
                            BrandName = "KTM",
                            VehicleTypeId = 2
                        },
                        new
                        {
                            BrandId = 21,
                            BrandName = "Cadillac",
                            VehicleTypeId = 2
                        },
                        new
                        {
                            BrandId = 22,
                            BrandName = "Harley-Davidson",
                            VehicleTypeId = 1
                        },
                        new
                        {
                            BrandId = 23,
                            BrandName = "Toyota",
                            VehicleTypeId = 3
                        },
                        new
                        {
                            BrandId = 24,
                            BrandName = "Pontiac",
                            VehicleTypeId = 3
                        },
                        new
                        {
                            BrandId = 25,
                            BrandName = "Packard",
                            VehicleTypeId = 3
                        },
                        new
                        {
                            BrandId = 26,
                            BrandName = "Honda",
                            VehicleTypeId = 1
                        },
                        new
                        {
                            BrandId = 27,
                            BrandName = "Yamaha",
                            VehicleTypeId = 1
                        },
                        new
                        {
                            BrandId = 28,
                            BrandName = "Hyundai",
                            VehicleTypeId = 3
                        },
                        new
                        {
                            BrandId = 29,
                            BrandName = "Volkswagen",
                            VehicleTypeId = 2
                        },
                        new
                        {
                            BrandId = 30,
                            BrandName = "Chevrolet",
                            VehicleTypeId = 2
                        },
                        new
                        {
                            BrandId = 31,
                            BrandName = "Hummer",
                            VehicleTypeId = 2
                        },
                        new
                        {
                            BrandId = 32,
                            BrandName = "Volvo",
                            VehicleTypeId = 2
                        },
                        new
                        {
                            BrandId = 33,
                            BrandName = "Vauxhall",
                            VehicleTypeId = 2
                        },
                        new
                        {
                            BrandId = 34,
                            BrandName = "Chrysler",
                            VehicleTypeId = 2
                        },
                        new
                        {
                            BrandId = 35,
                            BrandName = "Isuzu",
                            VehicleTypeId = 3
                        },
                        new
                        {
                            BrandId = 36,
                            BrandName = "Nissan",
                            VehicleTypeId = 3
                        },
                        new
                        {
                            BrandId = 37,
                            BrandName = "Leyland",
                            VehicleTypeId = 3
                        },
                        new
                        {
                            BrandId = 38,
                            BrandName = "Citroen",
                            VehicleTypeId = 2
                        },
                        new
                        {
                            BrandId = 39,
                            BrandName = "Bajaj",
                            VehicleTypeId = 1
                        },
                        new
                        {
                            BrandId = 40,
                            BrandName = "Opel",
                            VehicleTypeId = 2
                        },
                        new
                        {
                            BrandId = 41,
                            BrandName = "Mitsubishi",
                            VehicleTypeId = 2
                        },
                        new
                        {
                            BrandId = 42,
                            BrandName = "Jeep",
                            VehicleTypeId = 3
                        },
                        new
                        {
                            BrandId = 43,
                            BrandName = "Peugeot",
                            VehicleTypeId = 2
                        },
                        new
                        {
                            BrandId = 44,
                            BrandName = "Kawasaki",
                            VehicleTypeId = 1
                        },
                        new
                        {
                            BrandId = 45,
                            BrandName = "Porsche",
                            VehicleTypeId = 2
                        },
                        new
                        {
                            BrandId = 46,
                            BrandName = "Datsun",
                            VehicleTypeId = 2
                        },
                        new
                        {
                            BrandId = 47,
                            BrandName = "Daewoo",
                            VehicleTypeId = 3
                        },
                        new
                        {
                            BrandId = 48,
                            BrandName = "Kia",
                            VehicleTypeId = 2
                        },
                        new
                        {
                            BrandId = 49,
                            BrandName = "Daihatsu",
                            VehicleTypeId = 3
                        },
                        new
                        {
                            BrandId = 50,
                            BrandName = "Renault",
                            VehicleTypeId = 2
                        },
                        new
                        {
                            BrandId = 51,
                            BrandName = "Piaggio",
                            VehicleTypeId = 1
                        },
                        new
                        {
                            BrandId = 52,
                            BrandName = "Daimler",
                            VehicleTypeId = 2
                        },
                        new
                        {
                            BrandId = 53,
                            BrandName = "Rover",
                            VehicleTypeId = 2
                        },
                        new
                        {
                            BrandId = 54,
                            BrandName = "Austin",
                            VehicleTypeId = 2
                        },
                        new
                        {
                            BrandId = 55,
                            BrandName = "Saab",
                            VehicleTypeId = 2
                        },
                        new
                        {
                            BrandId = 56,
                            BrandName = "Willys",
                            VehicleTypeId = 3
                        });
                });

            modelBuilder.Entity("_AbsoPickUp.Models.VehicleColour", b =>
                {
                    b.Property<int>("VehicleColorId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("VehicleColorId"), 1L, 1);

                    b.Property<string>("VehicleColorCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("VehicleColorName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("VehicleColorId");

                    b.ToTable("VehicleColour");

                    b.HasData(
                        new
                        {
                            VehicleColorId = 1,
                            VehicleColorCode = "#ffffff",
                            VehicleColorName = "White"
                        },
                        new
                        {
                            VehicleColorId = 2,
                            VehicleColorCode = "#c0c0c0",
                            VehicleColorName = "Silver"
                        },
                        new
                        {
                            VehicleColorId = 3,
                            VehicleColorCode = "#808080",
                            VehicleColorName = "Gray"
                        },
                        new
                        {
                            VehicleColorId = 4,
                            VehicleColorCode = "#ff3b30",
                            VehicleColorName = "Red"
                        },
                        new
                        {
                            VehicleColorId = 5,
                            VehicleColorCode = "#007aff",
                            VehicleColorName = "Blue"
                        },
                        new
                        {
                            VehicleColorId = 6,
                            VehicleColorCode = "#f5f5dc",
                            VehicleColorName = "Beige"
                        },
                        new
                        {
                            VehicleColorId = 7,
                            VehicleColorCode = "#ff9500",
                            VehicleColorName = "Orange"
                        },
                        new
                        {
                            VehicleColorId = 8,
                            VehicleColorCode = "#ffd700",
                            VehicleColorName = "Gold"
                        },
                        new
                        {
                            VehicleColorId = 9,
                            VehicleColorCode = "#000000",
                            VehicleColorName = "Black"
                        },
                        new
                        {
                            VehicleColorId = 10,
                            VehicleColorCode = "#4cd964",
                            VehicleColorName = "Green"
                        },
                        new
                        {
                            VehicleColorId = 11,
                            VehicleColorCode = "#ffcc00",
                            VehicleColorName = "Yellow"
                        },
                        new
                        {
                            VehicleColorId = 12,
                            VehicleColorCode = "#5ac8fa",
                            VehicleColorName = "Teal Blue"
                        },
                        new
                        {
                            VehicleColorId = 13,
                            VehicleColorCode = "#5856d6",
                            VehicleColorName = "Purple"
                        },
                        new
                        {
                            VehicleColorId = 14,
                            VehicleColorCode = "#ff2d55",
                            VehicleColorName = "Pink"
                        },
                        new
                        {
                            VehicleColorId = 15,
                            VehicleColorCode = "#a52a2a",
                            VehicleColorName = "Brown"
                        },
                        new
                        {
                            VehicleColorId = 16,
                            VehicleColorCode = "#999da0",
                            VehicleColorName = "Metallic Silver"
                        },
                        new
                        {
                            VehicleColorId = 17,
                            VehicleColorCode = "#444e54",
                            VehicleColorName = "Metallic Gun Metal"
                        },
                        new
                        {
                            VehicleColorId = 18,
                            VehicleColorCode = "#26282a",
                            VehicleColorName = "Matte Gray"
                        },
                        new
                        {
                            VehicleColorId = 19,
                            VehicleColorCode = "#515554",
                            VehicleColorName = "Matte Light Grey"
                        },
                        new
                        {
                            VehicleColorId = 20,
                            VehicleColorCode = "#151921",
                            VehicleColorName = "Util Black"
                        },
                        new
                        {
                            VehicleColorId = 21,
                            VehicleColorCode = "#363a3f",
                            VehicleColorName = "Worn Graphite"
                        },
                        new
                        {
                            VehicleColorId = 22,
                            VehicleColorCode = "#d3d3d3",
                            VehicleColorName = "Worn Silver"
                        },
                        new
                        {
                            VehicleColorId = 23,
                            VehicleColorCode = "#c00e1a",
                            VehicleColorName = "Metallic Red"
                        },
                        new
                        {
                            VehicleColorId = 24,
                            VehicleColorCode = "#c2944f",
                            VehicleColorName = "Metallic Classic Gold"
                        },
                        new
                        {
                            VehicleColorId = 25,
                            VehicleColorCode = "#f78616",
                            VehicleColorName = "Metallic Orange"
                        },
                        new
                        {
                            VehicleColorId = 26,
                            VehicleColorCode = "#ffc91f",
                            VehicleColorName = "Matte Yellow"
                        },
                        new
                        {
                            VehicleColorId = 27,
                            VehicleColorCode = "#155c2d",
                            VehicleColorName = "Metallic Green"
                        },
                        new
                        {
                            VehicleColorId = 28,
                            VehicleColorCode = "#65867f",
                            VehicleColorName = "Worn Sea Wash"
                        },
                        new
                        {
                            VehicleColorId = 29,
                            VehicleColorCode = "#47578f",
                            VehicleColorName = "Metallic Blue"
                        },
                        new
                        {
                            VehicleColorId = 30,
                            VehicleColorCode = "#ffcf20",
                            VehicleColorName = "Metallic Taxi Yellow"
                        },
                        new
                        {
                            VehicleColorId = 31,
                            VehicleColorCode = "#98d223",
                            VehicleColorName = "Metallic Lime"
                        },
                        new
                        {
                            VehicleColorId = 32,
                            VehicleColorCode = "#9b8c78",
                            VehicleColorName = "Metallic Champagne"
                        },
                        new
                        {
                            VehicleColorId = 33,
                            VehicleColorCode = "#473f2b",
                            VehicleColorName = "Metallic Dark Ivory"
                        },
                        new
                        {
                            VehicleColorId = 34,
                            VehicleColorCode = "#775c3e",
                            VehicleColorName = "Metallic Light Brown"
                        },
                        new
                        {
                            VehicleColorId = 35,
                            VehicleColorCode = "#a4965f",
                            VehicleColorName = "Metallic Beechwood"
                        },
                        new
                        {
                            VehicleColorId = 36,
                            VehicleColorCode = "#dfd5b2",
                            VehicleColorName = "Metallic Sun Bleeched Sand"
                        },
                        new
                        {
                            VehicleColorId = 37,
                            VehicleColorCode = "#f7edd5",
                            VehicleColorName = "Metallic Cream"
                        },
                        new
                        {
                            VehicleColorId = 38,
                            VehicleColorCode = "#fffff6",
                            VehicleColorName = "Metallic White"
                        },
                        new
                        {
                            VehicleColorId = 39,
                            VehicleColorCode = "#453831",
                            VehicleColorName = "Worn Brown"
                        },
                        new
                        {
                            VehicleColorId = 40,
                            VehicleColorCode = "#6a747c",
                            VehicleColorName = "Brushed Steel"
                        },
                        new
                        {
                            VehicleColorId = 41,
                            VehicleColorCode = "#9ba0a8",
                            VehicleColorName = "Brushed Aluminium"
                        },
                        new
                        {
                            VehicleColorId = 42,
                            VehicleColorCode = "#5870a1",
                            VehicleColorName = "Chrome"
                        },
                        new
                        {
                            VehicleColorId = 43,
                            VehicleColorCode = "#bcac8f",
                            VehicleColorName = "Matte Brown"
                        },
                        new
                        {
                            VehicleColorId = 44,
                            VehicleColorCode = "#6b1f7b",
                            VehicleColorName = "Matte Purple"
                        });
                });

            modelBuilder.Entity("_AbsoPickUp.Models.VehicleDetails", b =>
                {
                    b.Property<int>("VehicleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("VehicleId"), 1L, 1);

                    b.Property<int>("BrandId")
                        .HasColumnType("int");

                    b.Property<int>("DriverId")
                        .HasColumnType("int");

                    b.Property<string>("RegisterationNumber")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("VehicleColorId")
                        .HasColumnType("int");

                    b.Property<int>("VehicleTypeId")
                        .HasColumnType("int");

                    b.HasKey("VehicleId");

                    b.HasIndex("BrandId");

                    b.HasIndex("DriverId");

                    b.HasIndex("VehicleColorId");

                    b.HasIndex("VehicleTypeId");

                    b.ToTable("VehicleDetails");
                });

            modelBuilder.Entity("_AbsoPickUp.Models.VehicleTypes", b =>
                {
                    b.Property<int>("VehicleTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("VehicleTypeId"), 1L, 1);

                    b.Property<string>("VehicleType")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("VehicleTypeId");

                    b.ToTable("VehicleTypes");

                    b.HasData(
                        new
                        {
                            VehicleTypeId = 1,
                            VehicleType = "Scooter"
                        },
                        new
                        {
                            VehicleTypeId = 2,
                            VehicleType = "Car"
                        },
                        new
                        {
                            VehicleTypeId = 3,
                            VehicleType = "Bakkie"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasDiscriminator<string>("Discriminator").HasValue("IdentityUser");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("_AbsoPickUp.Models.UserDetails", b =>
                {
                    b.HasBaseType("Microsoft.AspNetCore.Identity.IdentityUser");

                    b.Property<int>("ApplicationStatus")
                        .HasColumnType("int");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("DOB")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DeletedBy")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("DeviceToken")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DeviceType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DialCode")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("FacebookId")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("GoogleId")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsSocialUser")
                        .HasColumnType("bit");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int?>("Otp")
                        .IsRequired()
                        .HasMaxLength(25)
                        .HasColumnType("int");

                    b.Property<string>("ProfilePic")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("RejectReason")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("UserTypeId")
                        .HasColumnType("int");

                    b.HasIndex("UserTypeId");

                    b.HasDiscriminator().HasValue("UserDetails");
                });

            modelBuilder.Entity("_AbsoPickUp.Models.DeliveryDetails", b =>
                {
                    b.HasOne("_AbsoPickUp.Models.DeliveryRequest", "DeliveryRequest")
                        .WithMany()
                        .HasForeignKey("RequestId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("_AbsoPickUp.Models.DeliveryStatus", "DeliveryStatus")
                        .WithMany()
                        .HasForeignKey("StatusId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("DeliveryRequest");

                    b.Navigation("DeliveryStatus");
                });

            modelBuilder.Entity("_AbsoPickUp.Models.DeliveryPrice", b =>
                {
                    b.HasOne("_AbsoPickUp.Models.DeliveryTypes", "DeliveryTypes")
                        .WithMany()
                        .HasForeignKey("TypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("DeliveryTypes");
                });

            modelBuilder.Entity("_AbsoPickUp.Models.DeliveryRequest", b =>
                {
                    b.HasOne("_AbsoPickUp.Models.DeliveryTypes", "DeliveryTypes")
                        .WithMany()
                        .HasForeignKey("DeliveryTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("DeliveryTypes");
                });

            modelBuilder.Entity("_AbsoPickUp.Models.DriverDetails", b =>
                {
                    b.HasOne("_AbsoPickUp.Models.SouthAfricaProvinces", "SouthAfricaProvinces")
                        .WithMany()
                        .HasForeignKey("ProvinceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("SouthAfricaProvinces");
                });

            modelBuilder.Entity("_AbsoPickUp.Models.DriverDocuments", b =>
                {
                    b.HasOne("_AbsoPickUp.Models.DocumentTypes", "DocumentTypes")
                        .WithMany()
                        .HasForeignKey("DocTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("DocumentTypes");
                });

            modelBuilder.Entity("_AbsoPickUp.Models.IndividualUserDocuments", b =>
                {
                    b.HasOne("_AbsoPickUp.Models.DocumentTypes", "DocumentTypes")
                        .WithMany()
                        .HasForeignKey("DocTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("DocumentTypes");
                });

            modelBuilder.Entity("_AbsoPickUp.Models.ParcelSubCategory", b =>
                {
                    b.HasOne("_AbsoPickUp.Models.ParcelCategory", "ParcelCategory")
                        .WithMany()
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ParcelCategory");
                });

            modelBuilder.Entity("_AbsoPickUp.Models.PaymentDetails", b =>
                {
                    b.HasOne("_AbsoPickUp.Models.Orders", "Orders")
                        .WithMany()
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Orders");
                });

            modelBuilder.Entity("_AbsoPickUp.Models.VehicleDetails", b =>
                {
                    b.HasOne("_AbsoPickUp.Models.VehicleBrand", "VehicleBrand")
                        .WithMany()
                        .HasForeignKey("BrandId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("_AbsoPickUp.Models.DriverDetails", "DriverDetails")
                        .WithMany()
                        .HasForeignKey("DriverId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("_AbsoPickUp.Models.VehicleColour", "VehicleColour")
                        .WithMany()
                        .HasForeignKey("VehicleColorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("_AbsoPickUp.Models.VehicleTypes", "VehicleTypes")
                        .WithMany()
                        .HasForeignKey("VehicleTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("DriverDetails");

                    b.Navigation("VehicleBrand");

                    b.Navigation("VehicleColour");

                    b.Navigation("VehicleTypes");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("_AbsoPickUp.Models.UserDetails", b =>
                {
                    b.HasOne("_AbsoPickUp.Models.UserTypes", "UserTypes")
                        .WithMany()
                        .HasForeignKey("UserTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("UserTypes");
                });
#pragma warning restore 612, 618
        }
    }
}
