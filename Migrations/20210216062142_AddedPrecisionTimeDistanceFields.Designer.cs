// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using _AbsoPickUp.Data;

namespace _AbsoPickUp.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20210216062142_AddedPrecisionTimeDistanceFields")]
    partial class AddedPrecisionTimeDistanceFields
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .UseIdentityColumns()
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.2");

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers");

                    b.HasDiscriminator<string>("Discriminator").HasValue("IdentityUser");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("_AbsoPickUp.Models.BusinessDetails", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("ContactPerson")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("ExternalNumber")
                        .IsRequired()
                        .HasMaxLength(25)
                        .HasColumnType("nvarchar(25)");

                    b.Property<string>("LicenceNumber")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("VAT")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Website")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.ToTable("BusinessDetails");
                });

            modelBuilder.Entity("_AbsoPickUp.Models.BusinessDocuments", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("AgreementFilePath")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ApplicationStatus")
                        .HasColumnType("int");

                    b.Property<string>("ChamberCommerceFilePath")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LicenceFilePath")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("VATFilePath")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.ToTable("BusinessDocuments");
                });

            modelBuilder.Entity("_AbsoPickUp.Models.DeliveryDetails", b =>
                {
                    b.Property<int>("DeliveryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<DateTime>("DeliveryDateTime")
                        .HasColumnType("datetime2");

                    b.Property<int>("DriverId")
                        .HasColumnType("int");

                    b.Property<decimal>("DriverLat")
                        .HasPrecision(18, 9)
                        .HasColumnType("decimal(18,9)");

                    b.Property<decimal>("DriverLong")
                        .HasPrecision(18, 9)
                        .HasColumnType("decimal(18,9)");

                    b.Property<int>("RequestId")
                        .HasColumnType("int");

                    b.Property<int>("StatusId")
                        .HasColumnType("int");

                    b.HasKey("DeliveryId");

                    b.HasIndex("DriverId");

                    b.HasIndex("RequestId");

                    b.HasIndex("StatusId");

                    b.ToTable("DeliveryDetails");
                });

            modelBuilder.Entity("_AbsoPickUp.Models.DeliveryPrice", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<int>("Amount")
                        .HasColumnType("int");

                    b.Property<int>("TypeId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("TypeId");

                    b.ToTable("DeliveryPrice");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Amount = 45,
                            TypeId = 1
                        },
                        new
                        {
                            Id = 2,
                            Amount = 80,
                            TypeId = 2
                        },
                        new
                        {
                            Id = 3,
                            Amount = 300,
                            TypeId = 3
                        });
                });

            modelBuilder.Entity("_AbsoPickUp.Models.DeliveryRequest", b =>
                {
                    b.Property<int>("RequestId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<int>("DialCode")
                        .HasColumnType("int");

                    b.Property<string>("Notes")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PackageName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<decimal>("ReceiverLat")
                        .HasPrecision(18, 9)
                        .HasColumnType("decimal(18,9)");

                    b.Property<decimal>("ReceiverLong")
                        .HasPrecision(18, 9)
                        .HasColumnType("decimal(18,9)");

                    b.Property<string>("ReceiverMobileNumber")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)");

                    b.Property<string>("ReceiverName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("SenderId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("SenderLat")
                        .HasPrecision(18, 9)
                        .HasColumnType("decimal(18,9)");

                    b.Property<decimal>("SenderLong")
                        .HasPrecision(18, 9)
                        .HasColumnType("decimal(18,9)");

                    b.Property<decimal>("TotalDeliveryDistance")
                        .HasPrecision(5, 3)
                        .HasColumnType("decimal(5,3)");

                    b.Property<decimal>("TotalDeliveryTime")
                        .HasPrecision(5, 3)
                        .HasColumnType("decimal(5,3)");

                    b.Property<int>("TypeId")
                        .HasColumnType("int");

                    b.HasKey("RequestId");

                    b.HasIndex("TypeId");

                    b.ToTable("DeliveryRequest");
                });

            modelBuilder.Entity("_AbsoPickUp.Models.DeliveryStatus", b =>
                {
                    b.Property<int>("StatusId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("StatusId");

                    b.ToTable("DeliveryStatus");

                    b.HasData(
                        new
                        {
                            StatusId = 1,
                            Description = "Unassigned"
                        },
                        new
                        {
                            StatusId = 2,
                            Description = "Assigned"
                        },
                        new
                        {
                            StatusId = 3,
                            Description = "With Driver"
                        },
                        new
                        {
                            StatusId = 4,
                            Description = "Delivery on Route"
                        },
                        new
                        {
                            StatusId = 5,
                            Description = "Arrived"
                        },
                        new
                        {
                            StatusId = 6,
                            Description = "Delivered"
                        });
                });

            modelBuilder.Entity("_AbsoPickUp.Models.DeliveryTypes", b =>
                {
                    b.Property<int>("TypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("TypeId");

                    b.ToTable("DeliveryTypes");

                    b.HasData(
                        new
                        {
                            TypeId = 1,
                            Description = "Normal"
                        },
                        new
                        {
                            TypeId = 2,
                            Description = "Express"
                        },
                        new
                        {
                            TypeId = 3,
                            Description = "Bakkie"
                        });
                });

            modelBuilder.Entity("_AbsoPickUp.Models.DocumentTypes", b =>
                {
                    b.Property<int>("DocTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("DocTypeDescription")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("DocTypeId");

                    b.ToTable("DocumentTypes");

                    b.HasData(
                        new
                        {
                            DocTypeId = 1,
                            DocTypeDescription = "License"
                        },
                        new
                        {
                            DocTypeId = 2,
                            DocTypeDescription = "ProofOfResidence"
                        },
                        new
                        {
                            DocTypeId = 3,
                            DocTypeDescription = "NumberPlatePic"
                        },
                        new
                        {
                            DocTypeId = 4,
                            DocTypeDescription = "VehicleRegisteration"
                        },
                        new
                        {
                            DocTypeId = 5,
                            DocTypeDescription = "IDBook"
                        },
                        new
                        {
                            DocTypeId = 6,
                            DocTypeDescription = "IDCard"
                        },
                        new
                        {
                            DocTypeId = 7,
                            DocTypeDescription = "Selfie"
                        },
                        new
                        {
                            DocTypeId = 8,
                            DocTypeDescription = "ElectionCard"
                        },
                        new
                        {
                            DocTypeId = 9,
                            DocTypeDescription = "BirthCertificate"
                        },
                        new
                        {
                            DocTypeId = 10,
                            DocTypeDescription = "Passport"
                        },
                        new
                        {
                            DocTypeId = 11,
                            DocTypeDescription = "CarDiscPic"
                        },
                        new
                        {
                            DocTypeId = 12,
                            DocTypeDescription = "DriverProfilePic"
                        },
                        new
                        {
                            DocTypeId = 13,
                            DocTypeDescription = "Any ID Proof"
                        });
                });

            modelBuilder.Entity("_AbsoPickUp.Models.DriverDetails", b =>
                {
                    b.Property<int>("DriverId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("City")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("DOB")
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)");

                    b.Property<string>("DeletedBy")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("DeviceToken")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DeviceType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DialCode")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsPhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int?>("Otp")
                        .HasMaxLength(25)
                        .HasColumnType("int");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("ProfilePic")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<int>("ProvinceId")
                        .HasColumnType("int");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("DriverId");

                    b.HasIndex("ProvinceId");

                    b.ToTable("DriverDetails");
                });

            modelBuilder.Entity("_AbsoPickUp.Models.DriverDocuments", b =>
                {
                    b.Property<int>("DocId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("DocImgPath")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("DocTypeId")
                        .HasColumnType("int");

                    b.Property<int>("DriverId")
                        .HasColumnType("int");

                    b.HasKey("DocId");

                    b.HasIndex("DocTypeId");

                    b.ToTable("DriverDocuments");
                });

            modelBuilder.Entity("_AbsoPickUp.Models.IndividualUserDocuments", b =>
                {
                    b.Property<int>("DocId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("DocImgPath")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("DocTypeId")
                        .HasColumnType("int");

                    b.Property<string>("IndividualUserId")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("DocId");

                    b.HasIndex("DocTypeId");

                    b.ToTable("IndividualUserDocuments");
                });

            modelBuilder.Entity("_AbsoPickUp.Models.SouthAfricaProvinces", b =>
                {
                    b.Property<int>("ProvinceId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ProvinceId");

                    b.ToTable("SouthAfricaProvinces");

                    b.HasData(
                        new
                        {
                            ProvinceId = 1,
                            Name = "Eastern Cape"
                        },
                        new
                        {
                            ProvinceId = 2,
                            Name = "Free State"
                        },
                        new
                        {
                            ProvinceId = 3,
                            Name = "Gauteng"
                        },
                        new
                        {
                            ProvinceId = 4,
                            Name = "KwaZulu-Natal"
                        },
                        new
                        {
                            ProvinceId = 5,
                            Name = "Limpopo"
                        },
                        new
                        {
                            ProvinceId = 6,
                            Name = "Mpumalanga"
                        },
                        new
                        {
                            ProvinceId = 7,
                            Name = "Northern Cape"
                        },
                        new
                        {
                            ProvinceId = 8,
                            Name = "North West"
                        },
                        new
                        {
                            ProvinceId = 9,
                            Name = "Western Cape"
                        });
                });

            modelBuilder.Entity("_AbsoPickUp.Models.UserTypes", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("Type")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.ToTable("UserTypes");

                    b.HasData(
                        new
                        {
                            ID = 1,
                            Type = "Individual"
                        },
                        new
                        {
                            ID = 2,
                            Type = "Business"
                        });
                });

            modelBuilder.Entity("_AbsoPickUp.Models.VehicleBrand", b =>
                {
                    b.Property<int>("BrandId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("BrandName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("BrandId");

                    b.ToTable("VehicleBrand");

                    b.HasData(
                        new
                        {
                            BrandId = 1,
                            BrandName = "GWM"
                        },
                        new
                        {
                            BrandId = 2,
                            BrandName = "Ferrari"
                        },
                        new
                        {
                            BrandId = 3,
                            BrandName = "Lexus"
                        },
                        new
                        {
                            BrandId = 4,
                            BrandName = "Austin-Healey"
                        },
                        new
                        {
                            BrandId = 5,
                            BrandName = "Alfa Romeo"
                        },
                        new
                        {
                            BrandId = 6,
                            BrandName = "Fiat"
                        },
                        new
                        {
                            BrandId = 7,
                            BrandName = "Aston Martin"
                        },
                        new
                        {
                            BrandId = 8,
                            BrandName = "Maserati"
                        },
                        new
                        {
                            BrandId = 9,
                            BrandName = "Audi"
                        },
                        new
                        {
                            BrandId = 10,
                            BrandName = "Ford"
                        },
                        new
                        {
                            BrandId = 11,
                            BrandName = "Mahindra"
                        },
                        new
                        {
                            BrandId = 12,
                            BrandName = "Subaru"
                        },
                        new
                        {
                            BrandId = 13,
                            BrandName = "Hero"
                        },
                        new
                        {
                            BrandId = 14,
                            BrandName = "BMW"
                        },
                        new
                        {
                            BrandId = 15,
                            BrandName = "Land Cruiser"
                        },
                        new
                        {
                            BrandId = 16,
                            BrandName = "Suzuki"
                        },
                        new
                        {
                            BrandId = 17,
                            BrandName = "TVS"
                        },
                        new
                        {
                            BrandId = 18,
                            BrandName = "Mazda"
                        },
                        new
                        {
                            BrandId = 19,
                            BrandName = "Tata"
                        },
                        new
                        {
                            BrandId = 20,
                            BrandName = "KTM"
                        },
                        new
                        {
                            BrandId = 21,
                            BrandName = "Cadillac"
                        },
                        new
                        {
                            BrandId = 22,
                            BrandName = "Harley-Davidson"
                        },
                        new
                        {
                            BrandId = 23,
                            BrandName = "Toyota"
                        },
                        new
                        {
                            BrandId = 24,
                            BrandName = "Pontiac"
                        },
                        new
                        {
                            BrandId = 25,
                            BrandName = "Packard"
                        },
                        new
                        {
                            BrandId = 26,
                            BrandName = "Honda"
                        },
                        new
                        {
                            BrandId = 27,
                            BrandName = "Yamaha"
                        },
                        new
                        {
                            BrandId = 28,
                            BrandName = "Hyundai"
                        },
                        new
                        {
                            BrandId = 29,
                            BrandName = "Volkswagen"
                        },
                        new
                        {
                            BrandId = 30,
                            BrandName = "Chevrolet"
                        },
                        new
                        {
                            BrandId = 31,
                            BrandName = "Hummer"
                        },
                        new
                        {
                            BrandId = 32,
                            BrandName = "Volvo"
                        },
                        new
                        {
                            BrandId = 33,
                            BrandName = "Vauxhall"
                        },
                        new
                        {
                            BrandId = 34,
                            BrandName = "Chrysler"
                        },
                        new
                        {
                            BrandId = 35,
                            BrandName = "Isuzu"
                        },
                        new
                        {
                            BrandId = 36,
                            BrandName = "Nissan"
                        },
                        new
                        {
                            BrandId = 37,
                            BrandName = "Leyland"
                        },
                        new
                        {
                            BrandId = 38,
                            BrandName = "Citroen"
                        },
                        new
                        {
                            BrandId = 39,
                            BrandName = "Bajaj"
                        },
                        new
                        {
                            BrandId = 40,
                            BrandName = "Opel"
                        },
                        new
                        {
                            BrandId = 41,
                            BrandName = "Mitsubishi"
                        },
                        new
                        {
                            BrandId = 42,
                            BrandName = "Jeep"
                        },
                        new
                        {
                            BrandId = 43,
                            BrandName = "Peugeot"
                        },
                        new
                        {
                            BrandId = 44,
                            BrandName = "Kawasaki"
                        },
                        new
                        {
                            BrandId = 45,
                            BrandName = "Porsche"
                        },
                        new
                        {
                            BrandId = 46,
                            BrandName = "Datsun"
                        },
                        new
                        {
                            BrandId = 47,
                            BrandName = "Daewoo"
                        },
                        new
                        {
                            BrandId = 48,
                            BrandName = "Kia"
                        },
                        new
                        {
                            BrandId = 49,
                            BrandName = "Daihatsu"
                        },
                        new
                        {
                            BrandId = 50,
                            BrandName = "Renault"
                        },
                        new
                        {
                            BrandId = 51,
                            BrandName = "Piaggio"
                        },
                        new
                        {
                            BrandId = 52,
                            BrandName = "Daimler"
                        },
                        new
                        {
                            BrandId = 53,
                            BrandName = "Rover"
                        },
                        new
                        {
                            BrandId = 54,
                            BrandName = "Austin"
                        },
                        new
                        {
                            BrandId = 55,
                            BrandName = "Saab"
                        },
                        new
                        {
                            BrandId = 56,
                            BrandName = "Willys"
                        });
                });

            modelBuilder.Entity("_AbsoPickUp.Models.VehicleColour", b =>
                {
                    b.Property<int>("VehicleColorId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("VehicleColorName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("VehicleColorId");

                    b.ToTable("VehicleColour");

                    b.HasData(
                        new
                        {
                            VehicleColorId = 1,
                            VehicleColorName = "White"
                        },
                        new
                        {
                            VehicleColorId = 2,
                            VehicleColorName = "Silver"
                        },
                        new
                        {
                            VehicleColorId = 3,
                            VehicleColorName = "Gray"
                        },
                        new
                        {
                            VehicleColorId = 4,
                            VehicleColorName = "Red"
                        },
                        new
                        {
                            VehicleColorId = 5,
                            VehicleColorName = "Blue"
                        },
                        new
                        {
                            VehicleColorId = 6,
                            VehicleColorName = "Beige"
                        },
                        new
                        {
                            VehicleColorId = 7,
                            VehicleColorName = "Orange"
                        },
                        new
                        {
                            VehicleColorId = 8,
                            VehicleColorName = "Gold"
                        },
                        new
                        {
                            VehicleColorId = 9,
                            VehicleColorName = "Black"
                        },
                        new
                        {
                            VehicleColorId = 10,
                            VehicleColorName = "Green"
                        });
                });

            modelBuilder.Entity("_AbsoPickUp.Models.VehicleDetails", b =>
                {
                    b.Property<int>("VehicleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<int>("BrandId")
                        .HasColumnType("int");

                    b.Property<int>("DriverId")
                        .HasColumnType("int");

                    b.Property<string>("RegisterationNumber")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("VehicleColorId")
                        .HasColumnType("int");

                    b.Property<int>("VehicleTypeId")
                        .HasColumnType("int");

                    b.HasKey("VehicleId");

                    b.HasIndex("BrandId");

                    b.HasIndex("DriverId");

                    b.HasIndex("VehicleColorId");

                    b.HasIndex("VehicleTypeId");

                    b.ToTable("VehicleDetails");
                });

            modelBuilder.Entity("_AbsoPickUp.Models.VehicleTypes", b =>
                {
                    b.Property<int>("VehicleTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("VehicleType")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("VehicleTypeId");

                    b.ToTable("VehicleTypes");

                    b.HasData(
                        new
                        {
                            VehicleTypeId = 1,
                            VehicleType = "Scooter"
                        },
                        new
                        {
                            VehicleTypeId = 2,
                            VehicleType = "Car"
                        },
                        new
                        {
                            VehicleTypeId = 3,
                            VehicleType = "Bakkie"
                        });
                });

            modelBuilder.Entity("_AbsoPickUp.Models.UserDetails", b =>
                {
                    b.HasBaseType("Microsoft.AspNetCore.Identity.IdentityUser");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("DeletedBy")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("DeviceToken")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DeviceType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DialCode")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("FacebookId")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("GoogleId")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsSocialUser")
                        .HasColumnType("bit");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int?>("Otp")
                        .IsRequired()
                        .HasMaxLength(25)
                        .HasColumnType("int");

                    b.Property<string>("ProfilePic")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("UserTypeId")
                        .HasColumnType("int");

                    b.HasIndex("UserTypeId");

                    b.HasDiscriminator().HasValue("UserDetails");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("_AbsoPickUp.Models.DeliveryDetails", b =>
                {
                    b.HasOne("_AbsoPickUp.Models.DriverDetails", "DriverDetails")
                        .WithMany()
                        .HasForeignKey("DriverId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("_AbsoPickUp.Models.DeliveryRequest", "DeliveryRequest")
                        .WithMany()
                        .HasForeignKey("RequestId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("_AbsoPickUp.Models.DeliveryStatus", "DeliveryStatus")
                        .WithMany()
                        .HasForeignKey("StatusId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("DeliveryRequest");

                    b.Navigation("DeliveryStatus");

                    b.Navigation("DriverDetails");
                });

            modelBuilder.Entity("_AbsoPickUp.Models.DeliveryPrice", b =>
                {
                    b.HasOne("_AbsoPickUp.Models.DeliveryTypes", "DeliveryTypes")
                        .WithMany()
                        .HasForeignKey("TypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("DeliveryTypes");
                });

            modelBuilder.Entity("_AbsoPickUp.Models.DeliveryRequest", b =>
                {
                    b.HasOne("_AbsoPickUp.Models.DeliveryTypes", "DeliveryTypes")
                        .WithMany()
                        .HasForeignKey("TypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("DeliveryTypes");
                });

            modelBuilder.Entity("_AbsoPickUp.Models.DriverDetails", b =>
                {
                    b.HasOne("_AbsoPickUp.Models.SouthAfricaProvinces", "SouthAfricaProvinces")
                        .WithMany()
                        .HasForeignKey("ProvinceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("SouthAfricaProvinces");
                });

            modelBuilder.Entity("_AbsoPickUp.Models.DriverDocuments", b =>
                {
                    b.HasOne("_AbsoPickUp.Models.DocumentTypes", "DocumentTypes")
                        .WithMany()
                        .HasForeignKey("DocTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("DocumentTypes");
                });

            modelBuilder.Entity("_AbsoPickUp.Models.IndividualUserDocuments", b =>
                {
                    b.HasOne("_AbsoPickUp.Models.DocumentTypes", "DocumentTypes")
                        .WithMany()
                        .HasForeignKey("DocTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("DocumentTypes");
                });

            modelBuilder.Entity("_AbsoPickUp.Models.VehicleDetails", b =>
                {
                    b.HasOne("_AbsoPickUp.Models.VehicleBrand", "VehicleBrand")
                        .WithMany()
                        .HasForeignKey("BrandId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("_AbsoPickUp.Models.DriverDetails", "DriverDetails")
                        .WithMany()
                        .HasForeignKey("DriverId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("_AbsoPickUp.Models.VehicleColour", "VehicleColour")
                        .WithMany()
                        .HasForeignKey("VehicleColorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("_AbsoPickUp.Models.VehicleTypes", "VehicleTypes")
                        .WithMany()
                        .HasForeignKey("VehicleTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("DriverDetails");

                    b.Navigation("VehicleBrand");

                    b.Navigation("VehicleColour");

                    b.Navigation("VehicleTypes");
                });

            modelBuilder.Entity("_AbsoPickUp.Models.UserDetails", b =>
                {
                    b.HasOne("_AbsoPickUp.Models.UserTypes", "UserTypes")
                        .WithMany()
                        .HasForeignKey("UserTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("UserTypes");
                });
#pragma warning restore 612, 618
        }
    }
}
